// This is Redwood's routing mechanism. It takes inspiration from both Ruby on
// Rails' routing approach and from both React Router and Reach Router (the
// latter of which has closely inspired some of this code).

export {
  PageLoadingContextProvider,
  usePageLoadingContext,
} from './PageLoadingContext'
export { back, navigate } from './history'
export { Link, NavLink, Redirect, useMatch } from './links'
export { LocationProvider, useLocation } from './location'
export { ParamsContext, ParamsProvider, useParams } from './params'
export { Route, Router, routes } from './router'

export * from './Set'

export * from './route-announcement'
export { default as RouteAnnouncement } from './route-announcement'
export * from './route-focus'
export { default as RouteFocus } from './route-focus'

export { getRouteRegexAndParams, matchPath, parseSearch } from './util'

/**
 * A more specific interface will be generated by
 * babel-plugin-redwood-routes-auto-loader when a redwood project is built
 *
 * @example
 * interface AvailableRoutes {
 *   home: (params?: RouteParams<"/">) => "/"
 *   post: (params?: RouteParams<"/posts/{id:Int}">) => "/posts/{id:Int}"
 * }
 */
// Keep this in index.ts so it can be extended with declaration merging
export interface AvailableRoutes {
  [key: string]: (
    args?: Record<string | number, string | number | boolean | symbol>
  ) => string
}

export { SkipNavContent, SkipNavLink } from '@reach/skip-nav'

// Used by packages/internal/src/generate/templates/web-routerRoutes.d.ts.template
export * from './routeParamsTypes'
